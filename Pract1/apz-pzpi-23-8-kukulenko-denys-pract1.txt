МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ 
 
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ 
 
Кафедра «Програмна інженерія» 
 
 
 
 
ЗВІТ 
з практичної роботи №1 
з дисципліни «Аналіз та рефакторинг коду» 
на тему «Правила оформлення програмного коду на Java» 
 
 
 
 
 
 
 
 
Виконав:                                                                            Прийняв: 
ст. гр. ПЗПІ-23-8                                                               Старший викладач каф. ПІ Кукуленко Д. В.                                                                Сокорчук І. П. 
 
 
 
 
 
 
Харків 2025 
 
1.1 Мета роботи 
Ознайомитися з основними правилами оформлення програмного коду на мові Java відповідно до офіційних рекомендацій Oracle та Google. Показати значення стандартизації стилю для підвищення якості та читабельності коду, а також навчитися застосовувати практичні інструменти, які забезпечують ефективну командну роботу. 
 
1.2 Хід роботи 
1.2.1 Важливість правил оформлення коду 
Дотримання правил оформлення коду в Java забезпечує підвищену читабельність, зменшує кількість помилок і полегшує командну розробку. Єдині стандарти полегшують рев’ю коду та роблять програму зрозумілою для всіх учасників команди. 
 
1.2.2 Структура коду 
У цьому розділі розглянуто принципи організації програмного коду в Java-проєкті та логічного поділу його на пакети, файли та класи. Показано, що дотримання правильної структури забезпечує зручність навігації по проєкту, спрощує пошук необхідного функціоналу, полегшує підтримку та тестування коду, а також робить його зрозумілим для інших розробників. У мові Java кожен публічний клас має розміщуватися в окремому файлі, ім’я якого збігається з іменем цього класу, а логічно пов’язані класи слід об’єднувати у спільні пакети (packages). Крім того, великі секції коду рекомендується розділяти коментарями або порожніми рядками, щоб підвищити читабельність і впорядкованість. У прикладі нижче наведено правильний і неправильний підходи до організації класів у Java-файлах. 
 
Приклад коду (правильно): 
1	// Пакет моделей користувачів
2	package com.example.models;
3	
4	// Кожен клас у окремому файлі з відповідною назвою
5	public class User {
6	    private String name;
7	    private int age;
8	
9	    public User(String name, int age) {
10	        this.name = name;
11	        this.age = age;
12	    }
13	
14	    public String getName() {
15	        return name;
16	    }
17	
18	    public int getAge() {
19	        return age;
20	    }
21	} 

Приклад коду (неправильно): 
1	// Усі класи розміщені в одному файлі
2	public class User {
3	    String name;
4	    int age;
5	}
6	
7	public class Order {
8	    int id;
9	    double price;
10	}
11	
12	public class Product {
13	    String title;
14	    double cost;
15	} 

У першому прикладі кожен клас розташований у власному файлі та має чітко визначену зону відповідальності, що відповідає стандартам оформлення коду в Java.
У другому прикладі кілька класів розміщено в одному файлі, що порушує принципи структуризації коду, ускладнює його супровід і може спричинити помилки під час компіляції або інтеграції проєкту.

1.2.3 Форматування коду 
У цьому розділі розглянуто правила форматування коду в мові Java та їхній вплив на читабельність, підтримуваність і передбачуваність програми.Дотримання єдиного стилю форматування дає змогу всім членам команди швидко орієнтуватися в коді, розуміти його логіку та уникати синтаксичних або логічних помилок. 

У Java важливо:

-	Використовувати 4 пробіли на рівень відступу.
-	Дотримуватися K&R-стилю дужок — відкрита дужка { розташовується в кінці рядка з оголошенням конструкції.
-	Вирівнювати аргументи методів, параметри та вкладені блоки коду.
-	Обмежувати довжину рядка до 100 символів.
-	Додавати порожній рядок між логічно незалежними частинами коду.
 
Приклад коду (добре): 
1	for (int i = 0; i < 10; i++) {
2	    System.out.println("Iteration: " + i);
3	    
4	    if (i % 2 == 0) {
5	        System.out.println("Even number");
6	    } else {
7	        System.out.println("Odd number");
8	    }
9	}

Приклад коду (погано): 
1	for(int i=0;i<10;i++){System.out.println("Iteration:"+i);if(i%2==0){System.out.println("Even number");}else{System.out.println("Odd number");}}

У першому прикладі дотримано відступи, пробіли, формат дужок і логічне розділення блоків коду, що робить його легким для читання та підтримки, і відповідає стандартам Oracle Java Code Conventions. У другому прикладі немає відступів, пробілів та логічного форматування, усі блоки злиті в один рядок. Такий код складно сприймати, легко допустити помилки та важко підтримувати, особливо в командній розробці. 

1.2.4 Іменування 
У цьому розділі розглянуто правила іменування змінних, методів, класів і констант у мові Java та їхній вплив на зрозумілість і підтримуваність коду.Імена повинні бути зрозумілими, короткими, унікальними та відображати призначення елемента, до якого вони належать.
Дотримання єдиних правил іменування підвищує читабельність коду, знижує кількість помилок і полегшує командну розробку.

У Java діють такі загальноприйняті конвенції іменування: 

-	camelCase — для назв змінних і методів;
-	PascalCase — для назв класів і інтерфейсів;
-	UPPER_SNAKE_CASE — для назв констант;
-	імена пакетів пишуться лише малими літерами, зазвичай у форматі зворотного доменного імені (наприклад, com.example.project).

Приклад коду (добре): 
1	// camelCase для змінних і методів
2	double accountBalance;
3	String accountHolderName;
4	
5	public void depositAmount(double amount) {
6	    accountBalance += amount;
7	}
8	
9	// PascalCase для класів
10	public class BankAccount {
11	    private String holderName;
12	    private double balance;
13	}
14	
15	// UPPER_SNAKE_CASE для констант
16	public static final double MINIMUM_BALANCE = 100.0;

Приклад коду (погано): 
1	// неправильний стиль іменування змінних і методів
2	double Account_Balance;
3	String Accountholdername;
4	
5	public void Deposit_Amount(double Amount) {
6	    Account_Balance += Amount;
7	}
8	
9	// неправильний стиль іменування класів
10	public class bank_account {
11	    String Holdername;
12	    double Balance;
13	}
14	
15	// неправильний стиль для констант
16	public static final double minimumbalance = 100.0;

У першому прикладі імена змінних, методів, класів і констант повністю відповідають Java Code Conventions, що забезпечує зрозумілість і передбачуваність коду.
У другому прикладі використано невідповідні стилі — великі літери на початку змінних, підкреслення, неправильний регістр і неконсистентні назви, що ускладнює сприйняття та може призвести до помилок при подальшій розробці.

1.2.5 Коментарі 
У цьому розділі розглянуто правила використання коментарів у мові Java та їхнє значення для пояснення логіки програми. 	, складних алгоритмів або бізнес-логіки. Водночас, надлишкові або очевидні коментарі, що лише дублюють зміст коду, погіршують його читабельність і можуть ввести в оману при подальшій підтримці.

У Java застосовуються три основні типи коментарів:

-	// — однорядкові коментарі;
-	/* ... */ — багаторядкові коментарі;
-	/** ... */ — документуючі коментарі у форматі JavaDoc (для класів, методів, констант).
 
Приклад коду (добре): 
1	// Створюємо новий користувацький акаунт і відправляємо підтвердження на email
2	User newUser =serService.registerUser("john.doe@example.com");
3	
4	// Логування події створення акаунта для аудиту
5	logger.info("New user registered: " + newUser.getEmail());
6	
7	// Перевіряємо, чи користувач має права адміністратора
8	if (newUser.isAdmin()) {
9	    grantAdminAccess(newUser);
10	}

Приклад коду (погано): 
1	// newUser
2	User newUser = userService.registerUser("john.doe@example.com");
3	
4	// logger
5	logger.info("New user registered: " + newUser.getEmail());
6	
7	// Якщо користувач адміністратор
8	if (newUser.isAdmin()) {
9	    grantAdminAccess(newUser);
10	}

У першому прикладі коментарі пояснюють логіку та призначення коду, допомагають зрозуміти, навіщо виконуються ті чи інші дії, без повторення очевидного. У другому прикладі коментарі лише дублюють імена змінних або очевидні умови, не додають цінної інформації і створюють зайвий шум, що ускладнює сприйняття коду та його підтримку. 
 
1.2.6 Документування коду 
У цьому розділі розглянуто правила документування коду в мові Java за допомогою JavaDoc та їхнє значення для забезпечення зрозумілості, підтримуваності та повторного використання програмного коду. Документування є важливою частиною процесу розробки, оскільки воно допомагає іншим розробникам швидко зрозуміти призначення класів, методів, параметрів і результатів, що повертаються. Документуючі коментарі в Java створюються за допомогою спеціального синтаксису /** ... */ і розміщуються безпосередньо перед оголошенням класу або методу.
 
Приклад коду: 
1	/**
2	 * Обчислює знижку для клієнта на основі суми покупки.
3	 *
4	 * @param amount сума покупки у гривнях
5	 * @return розмір знижки у відсотках
6	 * @since 1.0
7	 * @see Customer
8	 */
9	public int calculateDiscount(double amount) {
10	    if (amount >= 200) {
11	        return 15;
12	    } else if (amount >= 100) {
13	        return 10;
14	    } else {
15	        return 0;
16	    }
17	} 

У прикладі використано JavaDoc-коментар, який містить чіткий опис методу, параметрів, значення, що повертається, і допоміжні теги. Така документація може бути автоматично згенерована у вигляді HTML-довідки. 

1.2.7 Конвенції для Java
У цьому розділі розглянуто основні правила та принципи оформлення програмного коду мовою Java, визначені офіційним стандартом Java Code Conventions. Дотримання цих правил забезпечує єдиний стиль написання програм, полегшує читання, супровід і спільну розробку проєктів. Основна увага приділяється правильному розташуванню дужок, відступам, іменуванню класів, методів і змінних, а також форматуванню коментарів.
Конвенції передбачають використання стилю CamelCase для назв методів і змінних, а також PascalCase для назв класів. Код повинен бути логічно поділений на блоки з чіткою структурою та мінімальною кількістю порушень принципу читабельності.


1.2.8 Кодування на основі тестування (TDD) 
У цьому розділі розглянуто підхід Test-Driven Development (TDD), коли тести пишуться ще до реалізації функціоналу. TDD підвищує надійність коду, спрощує внесення змін і дозволяє негайно перевіряти правильність реалізації. Написані тести одночасно описують очікувану поведінку програми, що робить код більш зрозумілим та підтримуваним іншими розробниками. У прикладі показано спочатку написання тесту для перевірки функції визначення простого числа, а потім реалізацію самої функції. Це демонструє, що тест визначає правильний результат ще до написання коду, забезпечуючи коректність логіки та зменшуючи ризик помилок. 
 
Приклад коду (тест): 
1	import static org.junit.jupiter.api.Assertions.assertTrue;
2	import static org.junit.jupiter.api.Assertions.assertFalse;
3	import org.junit.jupiter.api.Test;
4	
5	public class PrimeNumberTest {
6	
7	    @Test
8	    void testIsPrime() {
9	        assertTrue(PrimeChecker.isPrime(7));
10	        assertFalse(PrimeChecker.isPrime(10));
11	    }
12	} 

Приклад коду (реалізація): 
1	public class PrimeChecker {
2	
3	    public static boolean isPrime(int number) {
4	        if (number <= 1) return false;
5	        for (int i = 2; i <= Math.sqrt(number); i++) {
6	            if (number % i == 0) return false;
7	        }
8	        return true;
9	    }
10	}

У цьому прикладі тест описує очікуваний результат функції isPrime ще до її реалізації. Це дозволяє переконатися, що логіка визначення простого числа відповідає вимогам, і зменшує ймовірність помилок при розробці.  
 

1.2.9 Інструменти та автоматизація 
У цьому розділі розглянуто інструменти та підходи для автоматичного контролю якості коду в Java. Обговорено використання статичного аналізу коду за допомогою таких інструментів, як SonarQube, Checkstyle, PMD та SpotBugs, що дозволяють виявляти порушення стилю, потенційні помилки та проблемні ділянки коду. Також підкреслено значення автоформатування коду за допомогою інструментів типу Eclipse Formatter, IntelliJ Code Style та інтеграції цих перевірок у CI/CD-процеси, щоб код автоматично перевірявся при кожному коміті. Крім того, використання Git Hooks дозволяє контролювати відповідність стилю та проходження базових перевірок ще на етапі локальної роботи розробника, що підвищує якість коду та знижує ризик помилок у продакшн. 

1.2.10 Приклади оформлення коду 
цьому розділі розглянуто практичні приклади правильного та неправильного оформлення коду в Java та його вплив на читабельність і підтримку. Показано, що чистий і структурований код легше розуміти, тестувати і обговорювати у команді. У прикладі показано функцію для перевірки, чи є число парним, у двох варіантах: коректному та некоректному. 
 
Приклад коду (добре): 
1	public class NumberUtils {
2	
3	    public static boolean isEven(int number) {
4	        return number % 2 == 0;
5	    }
6	
7	    public static void printNumberInfo(int number) {
8	        System.out.println("Number: " + number);
9	        System.out.println("Even: " + isEven(number));
10	    }
11	} 

Приклад коду (погано): 
1	class N{static boolean e(int n){return n%2==0;}static void p(int n){System.out.println(n);System.out.println(e(n));}}) 
 
У першому прикладі дотримано чіткі відступи, пробіли, зрозумілі назви класів, методів та параметрів. Це дозволяє швидко зрозуміти призначення функції та її логіку. У другому прикладі код занадто стиснутий, назви не пояснювальні, відсутні пробіли та переноси рядків, що ускладнює його сприйняття та підтримку.
 
1.3 Висновки 
У ході виконання практичної роботи було поетапно вивчено правила оформлення коду на мові Java та їх практичне застосування. Спершу розглянуто значення правильного форматування коду, включно з відступами, розташуванням дужок, довжиною рядків, пробілами та логічним поділом блоків, і оцінено вплив цих факторів на читабельність та підтримуваність програм. Особлива увага приділялась іменуванню змінних, методів, класів та констант відповідно до Java Code Conventions: camelCase для змінних і методів, PascalCase для класів та UPPER_SNAKE_CASE для констант. Це забезпечує зрозумілість коду і зменшує ймовірність помилок при командній розробці. Далі було вивчено правила використання коментарів і документування коду для пояснення логіки, параметрів і результатів методів, що допомагає іншим розробникам швидко зрозуміти функціонал без необхідності детального аналізу коду. Також розглядались принципи організації коду у файлах, пакетах та класах, використання інструментів автоматизації, таких як Checkstyle, PMD, SpotBugs, для перевірки стилю коду та виявлення потенційних помилок. Окрему увагу приділено підходу Test-Driven Development (TDD), коли тести пишуться до реалізації функціоналу, що підвищує надійність, передбачуваність і тестованість програм. Практичне застосування цих правил та інструментів на прикладах методів і класів дозволило закріпити теоретичні знання та оцінити їх ефективність у забезпеченні чіткості, структурованості та підтримуваності коду. 

1.4 Використані джерела 
1.	Java Code Conventions [Електронний ресурс] – Режим доступу: https://www.oracle.com/java/technologies/javase/codeconventions.html (дата звернення: 17.10.2025).
2.	Official Java Documentation. Oracle [Електронний ресурс] – Режим доступу: https://docs.oracle.com/javase/ (дата звернення: 17.10.2025).
3.	JetBrains. Приклади оформлення коду та інструменти для Java [Електронний ресурс] – Режим доступу: https://www.jetbrains.com/help/idea/java.html (дата звернення: 17.10.2025). 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Додаток А 
Посилання на відео в YouTube 
 
https://youtu.be/_VncnFUZdN4 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Додаток Б 
Сторінки презентації 
 
  
Рисунок 1 - Титульна сторінка 
 
  
Рисунок 2 - Сторінка вступу 
 
 
 
 
  
Рисунок 3 - Сторінка форматування коду 
 
  
Рисунок 4 - Сторінка форматування коду 
 
  
Рисунок 5 - Сторінка іменування
 
  
Рисунок 6 - Сторінка коментарів 
 
 
  
Рисунок 7 - Сторінка документування коду


 
Рисунок 8 - Сторінка конвенцій Java

 
  
Рисунок 9 - Сторінка кодування на основі тестування
 
  
Рисунок 10 - Сторінка інструменти та автоматизація 
 
 
  
Рисунок 11 - Сторінка приклади оформлення коду 
  
Рисунок 12 - Сторінка висновків 
 
  
Рисунок 13 - Сторінка використаних джерел 
 
 
